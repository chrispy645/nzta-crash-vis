plot(x=sort(df.cp$mcg), a1)
points(x=sort(df.cp$mcg), y=pbeta(sort(df.cp$mcg), 3.4001, 2.8658), col="red", pch=20)
sum((a1 - pbeta(sort(df.cp$mcg), 3.4001, 2.8658))^2)
a1
sum(( sort(df.cp$mcg) - dnorm(sort(df.cp$mcg), 0.3632, 0.1229) )^2 )
sum(( sort(df.cp$mcg) - dbeta(sort(df.cp$mcg), 3.4001, 2.8658) )^2 )
plot(sort(df.cp$mcg), dnorm(sort(df.cp$mcg), 0.3632, 0.1229))
plot(x=sort(df.cp$mcg), y=dbeta(sort(df.cp$mcg), 3.4001, 2.8658))
plot(x=sort(df.cp$mcg))
lines(x=dbeta(sort(df.cp$mcg), 3.4001,2.8658))
lines(x=dnorm(sort(df.cp$mcg), 0.3632, 0.1229))
ecdf
rnorm(100, 2, 3)
xx = rnorm(100, 2, 3)
xx
ecdf(xx)
ecdf(xx)(xx)
ecdf(sorted(xx))
ecdf(sort(xx))
ecdf(sort(xx))(sort(xx))
plot( ecdf(sort(xx))(sort(xx)) )
sort(xx)
xx
xx = sort(xx)
xx
plot(xx)
ecdf(xx)
ec = ecdf(xx)
ec
ec(xx)
plot(ec(xx))
xx
write.table(xx)
xx
for(x in xx) { print(x) }
ec(xx)
df = read.arff("~/github/colorectal-data/mdi/data/ecoli.arff")
df.cp = df[df$class == "cp", ]
hist(normalise(df.cp$mcg),breaks=20,freq=FALSE)
lines(x=seqs, y=dbeta(seqs, 3.4001, 2.8658), col="red")
seqs = seq(from=-5, to=5, by=0.01)
df = read.arff("~/github/colorectal-data/mdi/data/ecoli.arff")
df.cp = df[df$class == "cp", ]
hist(normalise(df.cp$mcg),breaks=20,freq=FALSE)
lines(x=seqs, y=dbeta(seqs, 3.4001, 2.8658), col="red")
par(mfrow=c(1,2))
seqs = seq(from=-5, to=5, by=0.01)
df = read.arff("~/github/colorectal-data/mdi/data/ecoli.arff")
df.cp = df[df$class == "cp", ]
hist(normalise(df.cp$mcg),breaks=20,freq=FALSE)
lines(x=seqs, y=dbeta(seqs, 3.4001, 2.8658), col="red")
hist(df.cp$mcg, breaks=20, freq=FALSE)
lines(x=seqs, y=dnorm(seqs, 0.3632, 0.1229), col="red")
library(foreign)
par(mfrow=c(1,2))
seqs = seq(from=-5, to=5, by=0.01)
df = read.arff("~/github/colorectal-data/mdi/data/ecoli.arff")
df.cp = df[df$class == "cp", ]
hist(normalise(df.cp$mcg),breaks=20,freq=FALSE)
lines(x=seqs, y=dbeta(seqs, 3.4001, 2.8658), col="red")
hist(df.cp$mcg, breaks=20, freq=FALSE)
lines(x=seqs, y=dnorm(seqs, 0.3632, 0.1229), col="red")
a1 = sapply(sort(df.cp$mcg), ecdf(df.cp$mcg))
plot(x=sort(df.cp$mcg), a1)
points(x=sort(df.cp$mcg), y=pnorm(sort(df.cp$mcg), 0.3632, 0.1229), col="red", pch=20)
sum((a1 - pnorm(sort(df.cp$mcg), 0.3632, 0.1229))^2)
ecdf(df.cp$mcg)
ecdf(sort(df.cp$mcg))
hh = rnorm(1000, 2, 3)
hh
ecdf(hh)
sapply(sort(hh), ecdf(hh))
print("hello world!")
arr = c(9.0, 14.0, 16.0, 18.0, 19.0, 19.0, 20.0, 20.0, 21.0, 21.0, 22.0, 24.0, 24.0, 25.0, 25.0, 25.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 43.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 53.0, 54.0, 54.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 59.0, 59.0, 59.0, 60.0, 60.0, 61.0, 62.0, 62.0, 62.0, 62.0, 63.0, 63.0, 63.0, 63.0, 63.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 65.0, 65.0, 66.0, 66.0, 66.0, 66.0, 67.0, 67.0, 68.0, 68.0, 69.0, 70.0, 71.0, 71.0, 71.0, 71.0, 72.0, 72.0, 72.0, 72.0, 72.0, 73.0, 75.0, 75.0, 76.0, 78.0, 80.0, 81.0, 83.0)
arr
ecdf(arr)
sapply(ecdf(arr), arr)
sapply(arr, ecdf(arr))
tt = c(0.004081632653061225, 0.00816326530612245, 0.012244897959183673, 0.0163265306122449, 0.024489795918367346, 0.024489795918367346, 0.0326530612244898, 0.0326530612244898, 0.04081632653061224, 0.04081632653061224, 0.044897959183673466, 0.053061224489795916, 0.053061224489795916, 0.0653061224489796, 0.0653061224489796, 0.0653061224489796, 0.07346938775510205, 0.07346938775510205, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.11020408163265306, 0.11020408163265306, 0.11020408163265306, 0.11836734693877551, 0.11836734693877551, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.1510204081632653, 0.1510204081632653, 0.1510204081632653, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.19591836734693877, 0.19591836734693877, 0.19591836734693877, 0.19591836734693877, 0.21224489795918366, 0.21224489795918366, 0.21224489795918366, 0.21224489795918366, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.3224489795918367, 0.3224489795918367, 0.3224489795918367, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3877551020408163, 0.3877551020408163, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6693877551020408, 0.6693877551020408, 0.6693877551020408, 0.6693877551020408, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.7061224489795919, 0.7061224489795919, 0.7061224489795919, 0.7061224489795919, 0.7142857142857143, 0.7142857142857143, 0.726530612244898, 0.726530612244898, 0.726530612244898, 0.7387755102040816, 0.7387755102040816, 0.7387755102040816, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.8040816326530612, 0.8040816326530612, 0.8040816326530612, 0.8122448979591836, 0.8122448979591836, 0.8163265306122449, 0.8326530612244898, 0.8326530612244898, 0.8326530612244898, 0.8326530612244898, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.889795918367347, 0.889795918367347, 0.9061224489795918, 0.9061224489795918, 0.9061224489795918, 0.9061224489795918, 0.9142857142857143, 0.9142857142857143, 0.9224489795918367, 0.9224489795918367, 0.926530612244898, 0.9306122448979591, 0.9469387755102041, 0.9469387755102041, 0.9469387755102041, 0.9469387755102041, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9714285714285714, 0.9795918367346939, 0.9795918367346939, 0.9836734693877551, 0.9877551020408163, 0.9918367346938776, 0.9959183673469387, 1.0)
)
tt
tt = c(0.004081632653061225, 0.00816326530612245, 0.012244897959183673, 0.0163265306122449, 0.024489795918367346, 0.024489795918367346, 0.0326530612244898, 0.0326530612244898, 0.04081632653061224, 0.04081632653061224, 0.044897959183673466, 0.053061224489795916, 0.053061224489795916, 0.0653061224489796, 0.0653061224489796, 0.0653061224489796, 0.07346938775510205, 0.07346938775510205, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.09795918367346938, 0.11020408163265306, 0.11020408163265306, 0.11020408163265306, 0.11836734693877551, 0.11836734693877551, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.13877551020408163, 0.1510204081632653, 0.1510204081632653, 0.1510204081632653, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.17959183673469387, 0.19591836734693877, 0.19591836734693877, 0.19591836734693877, 0.19591836734693877, 0.21224489795918366, 0.21224489795918366, 0.21224489795918366, 0.21224489795918366, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.24489795918367346, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.27755102040816326, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.31020408163265306, 0.3224489795918367, 0.3224489795918367, 0.3224489795918367, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3510204081632653, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3795918367346939, 0.3877551020408163, 0.3877551020408163, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4122448979591837, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.4326530612244898, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.46122448979591835, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5306122448979592, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5551020408163265, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.5877551020408164, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6122448979591837, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6530612244897959, 0.6693877551020408, 0.6693877551020408, 0.6693877551020408, 0.6693877551020408, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.689795918367347, 0.7061224489795919, 0.7061224489795919, 0.7061224489795919, 0.7061224489795919, 0.7142857142857143, 0.7142857142857143, 0.726530612244898, 0.726530612244898, 0.726530612244898, 0.7387755102040816, 0.7387755102040816, 0.7387755102040816, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7714285714285715, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.7918367346938775, 0.8040816326530612, 0.8040816326530612, 0.8040816326530612, 0.8122448979591836, 0.8122448979591836, 0.8163265306122449, 0.8326530612244898, 0.8326530612244898, 0.8326530612244898, 0.8326530612244898, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8530612244897959, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.8816326530612245, 0.889795918367347, 0.889795918367347, 0.9061224489795918, 0.9061224489795918, 0.9061224489795918, 0.9061224489795918, 0.9142857142857143, 0.9142857142857143, 0.9224489795918367, 0.9224489795918367, 0.926530612244898, 0.9306122448979591, 0.9469387755102041, 0.9469387755102041, 0.9469387755102041, 0.9469387755102041, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9673469387755103, 0.9714285714285714, 0.9795918367346939, 0.9795918367346939, 0.9836734693877551, 0.9877551020408163, 0.9918367346938776, 0.9959183673469387, 1.0)
)
tt
length(tt)
sapply(ecdf(arr), arr)
gg = sapply(arr, ecdf(arr))
gg = gg[1:201]
tt
gg
all.equal(tt,gg)
arr
arr
ecdf(arr)
normalise = function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
ecdf(normalise(arr))
ecdf(normalise(arr)) == ecdf(arr)
sapply(arr, ecdf(arr))
sapply(arr, ecdf(arr)) == sapply(arr, ecdf(sort(arr)))
arr = c(53.0, 50.0, 65.0, 50.0, 62.0, 66.0, 26.0, 72.0, 59.0, 58.0, 71.0, 50.0, 46.0, 34.0, 48.0, 28.0, 63.0, 50.0, 62.0, 40.0, 54.0, 60.0, 35.0, 24.0, 52.0, 46.0, 58.0, 40.0, 47.0, 81.0, 52.0, 37.0, 64.0, 63.0, 45.0, 53.0, 57.0, 45.0, 19.0, 44.0, 50.0, 42.0, 55.0, 64.0, 36.0, 45.0, 53.0, 42.0, 42.0, 49.0, 61.0, 40.0, 46.0, 34.0, 75.0, 48.0, 49.0, 66.0, 43.0, 57.0, 34.0, 39.0, 73.0, 70.0, 33.0, 28.0, 46.0, 63.0, 39.0, 56.0, 51.0, 48.0, 35.0, 44.0, 51.0, 44.0, 36.0, 30.0, 27.0, 27.0, 18.0, 25.0, 49.0, 20.0, 58.0, 30.0, 41.0, 30.0, 53.0, 57.0, 64.0, 33.0, 30.0, 38.0, 64.0, 27.0, 50.0, 71.0, 63.0, 50.0, 46.0, 30.0, 50.0, 60.0, 47.0, 50.0, 57.0, 48.0, 36.0, 46.0, 52.0, 47.0, 80.0, 44.0, 44.0, 58.0, 68.0, 47.0, 46.0, 35.0, 72.0, 48.0, 43.0, 34.0, 56.0, 52.0, 52.0, 36.0, 78.0, 47.0, 27.0, 43.0, 49.0, 33.0, 39.0, 37.0, 36.0, 57.0, 59.0, 37.0, 32.0, 22.0, 24.0, 71.0, 42.0, 72.0, 45.0, 66.0, 32.0, 43.0, 67.0, 38.0, 46.0, 29.0, 55.0, 66.0, 51.0, 40.0, 39.0, 57.0, 71.0, 20.0, 50.0, 64.0, 37.0, 32.0, 43.0, 45.0, 35.0, 69.0, 33.0, 37.0, 39.0, 68.0, 31.0, 76.0, 64.0, 35.0, 26.0, 31.0, 59.0, 32.0, 39.0, 38.0, 37.0, 46.0, 49.0, 36.0, 72.0, 44.0, 32.0, 63.0, 51.0, 40.0, 64.0, 75.0, 72.0, 57.0, 21.0, 40.0, 25.0, 57.0, 46.0, 42.0, 67.0, 56.0, 48.0, 62.0, 27.0, 21.0, 48.0, 83.0, 36.0, 32.0, 39.0, 47.0, 35.0, 44.0, 28.0, 65.0, 49.0, 37.0, 29.0, 32.0, 40.0, 14.0, 45.0, 16.0, 48.0, 35.0, 35.0, 37.0, 62.0, 55.0, 54.0, 9.0, 31.0, 58.0, 42.0, 46.0, 41.0, 19.0, 25.0, 27.0, 36.0)
normalise(arr)
hist(rbeta(1000, 0.91, 0.74))
hist(rbeta(10000, 0.91, 0.74),breaks=20)
par(mfrow=c(1,1))
hist(rbeta(10000, 0.91, 0.74),breaks=20)
dbeta(1.13, 0.91, 0.74)
pbeta(1.13, 0.91, 0.74)
dnorm(66,73,6.2)
?dnorm
pnorm(66,73,6.2)
pnorm(66+0.0001,73,6.2) - pnorm(66-0.0001,73,6.2)
hist(rnorm(10000, 73, 6.2))
hist(rnorm(10000, 73, 6.2),breaks=30)
dnorm(100, 73, 6.2)
dnorm(100000, 73, 6.2)
hist(rnorm(10000, 73, 6.2),breaks=30,freq=FALSE)
dbeta(100, 1, 2)
dbeta(1, 1, 2)
hist(rbeta(10000, 73, 6.2),breaks=30,freq=FALSE)
hist(rbeta(10000, 73, 6.2),breaks=30,freq=FALSE)
dbeta(0.90, 73, 6.2)
dnorm(66,73,6.2)
dnorm(66,73,8.2)
dnorm(66,73,6.2)
hist(rnorm(10000, 73, 6.2),breaks=30)
hist(rnorm(10000, 73, 6.2),breaks=30,freq=FALSE)
?dnorm
data = round(data);
double zLower = (data - m_Mean - (m_Precision / 2)) / m_StandardDev;
double zUpper = (data - m_Mean + (m_Precision / 2)) / m_StandardDev;
double pLower = Statistics.normalProbability(zLower);
double pUpper = Statistics.normalProbability(zUpper);
return pUpper - pLower;
pnorm(66-0.0001, 73, 6.2)
pnorm(66-0.0001, 73, 6.2) - pnorm(66+0.0001, 73, 6.2)
aa = (66 - 0.0001 - 73) / 6.2
bb = (66 + 0.0001 - 73) / 6.2
pnorm(aa, 0, 1)
pnorm(bb, 0, 1)
pnorm(aa,0,1) - pnorm(bb,0,1)
pnorm(aa,0,1) -- pnorm(bb,0,1)
aa = (66 - 0.0000000001 - 73) / 6.2
aa = (66 - 0.0000000001 - 73) / 6.2
aa = (66 - 0.0000000001 - 73) / 6.2
bb = (66 - 0.0000000001 - 73) / 6.2
aa
bb
pnorm(aa)
hist(rbeta(10000, 0.429, 0.4511))
dbeta(1.0, 0.429, 0.4511)
hist(rbeta(10000, 0.429, 0.4511),freq=FALSE)
dbeta(1.0, 0.429, 0.4511)
dbeta(0.999, 0.429, 0.4511)
seq=seq(from=0,to=1,by=0.001)
seq
?seq
plot(x=seq, y=dbeta(seq, 0.429, 0.4511), type="l")
a1 = sapply(sort(df.cp$mcg), ecdf(df.cp$mcg))
plot(x=sort(df.cp$mcg), a1)
points(x=sort(df.cp$mcg), y=pnorm(sort(df.cp$mcg), 0.3632, 0.1229), col="red", pch=20)
df.cp$mch
df.cp$mc=g
df.cp$mcg
pbeta(1,0,1)
a1 = sapply(sort(df.cp$mcg), ecdf(df.cp$mcg))
plot(x=sort(df.cp$mcg), a1)
points(x=sort(df.cp$mcg), y=pbeta(sort(df.cp$mcg), 3.4001, 2.8658), col="red", pch=20)
library(MASS)
arr
aa = normalise(arr)
arr
aa
fitdistr(aa,"beta",list(shape1=1,shape2=1))
sd(c(7,2,6,3))
sd(c(4,2,7,8))
median
median(c(4,2,7,8))
sd(c(6,3))
sd(c(7,8))
var
library(foreign)
df = read.arff("~/github/colorectal-data/mdi/data/0.1/iris.arff")
df
colnames(df)
df[,1]
mean(df[,1])
?mean
mean(df[,1], na.rm=TRUE)
mean(df[,2], na.rm=TRUE)
mean(df[,3], na.rm=TRUE)
mean(df[,4], na.rm=TRUE)
mean(df[,5], na.rm=TRUE)
install.packages("VIMGUI")
install.packages("VIM")
library(VIMGUI)
library(VIMGUI)
library(VIM)
setwd("~/Dropbox/GovHack 2015/data")
df = read.csv("crash-tally.csv")
df
table(df)
View(df)
df = read.csv("crash-tally.csv")
table(df)
View(df)
summary
summary(df$count)
barplot(table(df$cause))
df$cause
table(df$cause)
table(df$cause)[1:10]
?table
sort(table(df$cause))
sort(table(df$cause))[1:10]
table(df$cause)
?table
table(df$cause[1:10])
order(table(df$cause))
order(table(df$cause), decreasing=TRUE)
df$cause[1]
table(df)
table(df$cause)
barplot(df$count)
order(df$count)
order(df$count, decreasing=TRUE)
df[ order(df$count, decreasing=TRUE), ]
sorted.df = df[ order(df$count, decreasing=TRUE), ]
setwd("~/Dropbox/GovHack 2015/R")
df = read.csv("../data/crash-tally.csv")
sorted.df = df[ order(df$count, decreasing=TRUE), ]
View(sorted.df)
barplot(df$count)
barplot(sorted.df$count)
?barplot
barplot(sorted.df$count, names.arg=sorted.df$cause)
barplot(sorted.df$count, names.arg=sorted.df$cause, las=2)
View(sorted.df)
png("barplot.png", height=500, width=2000)
barplot(sorted.df$count, names.arg=sorted.df$cause, las=2)
dev.off()
setwd("~/Dropbox/GovHack 2015/R")
png("barplot.png", height=500, width=2000)
barplot(sorted.df$count, names.arg=sorted.df$cause, las=2)
dev.off()
barplot(sorted.df$count[1:250], names.arg=sorted.df$cause[1:250], las=2)
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2)
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE)
?mar
?par
par(mar=c(2, 10, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE)
?barplot
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=10)
png("barplot.png", width=1000, height=500)
par(mar=c(2, 10, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
dev.off()
png("barplot.png", width=1000, height=1000)
par(mar=c(2, 10, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
dev.off()
png("barplot.png", width=2000, height=1000)
par(mar=c(2, 10, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
dev.off()
png("barplot.png", width=2000, height=1000)
par(mar=c(2, 50, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(2, 50, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1)
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(2, 50, 2, 2))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1, ylab="Frequency", main="Most common types of car crashes")
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(20, 50, 20, 20))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1, ylab="Frequency", main="Most common types of car crashes")
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1, xlab="Frequency", main="Most common types of car crashes")
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE, space=1, xlab="Frequency", main="Most common types of car crashes")
dev.off()
max(df$count)
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1, xlab="Frequency",
main="Most common types of car crashes", ylim=c(0, 40000))
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:100], names.arg=sorted.df$cause[1:100], las=2, horiz=TRUE, space=1, xlab="Frequency",
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE, space=1,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=2000, height=1500)
par(mar=c(2, 50, 2, 2))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE, space=1,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
png("barplot.png", width=2000, height=1500)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=1500, height=1000)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=3000, height=2000)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=3000, height=2000)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf")
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
dev.off()
pdf("barplot.pdf")
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf")
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=1000, height=500)
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=500, height=500)
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
?png
png("barplot.png", width=1500, height=1000, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=1500, height=1500, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=1500, height=1500, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
?png
pdf("barplot.pdf")
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf")
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=500, height=500)
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=5, height=5)
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=20, height=5)
#par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=20, height=10)
par(mar=c(1, 5, 1, 1))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=20, height=10)
par(mar=c(1, 10, 1, 1))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=20, height=10)
par(mar=c(1, 20, 1, 1))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
pdf("barplot.pdf", width=20, height=15)
par(mar=c(1, 30, 1, 1))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
?png
png("barplot.png", width=1500, height=2500, pointsize=20)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=1500, height=2500, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=1500, height=3000, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
png("barplot.png", width=3000, height=1500, pointsize=16)
par(mar=c(10, 50, 10, 10))
barplot(sorted.df$count[1:50], names.arg=sorted.df$cause[1:50], las=2, horiz=TRUE,
main="Most common types of car crashes", xlim=c(0, 40000))
dev.off()
?barplot
setwd("~/github/nzta-crash-vis")
setwd("~/github/nzta-crash-vis/R")
df = read.csv("../data/crash-merged-lat-lng.csv")
View(df)
unique(df$TLA.NAME)
length(unique(df$TLA.NAME))
barplot(table(df$TLA.NAME))
library(ggplot2)
ggplot(df, aes(factor(TLA.NAME)))
install.packages("ggmap")
library(ggmap)
citation('ggmap')
qmap("waikato university", zoom=14)
qmap("waikato university", zoom=10)
qmap("waikato university", zoom=13)
?qmap
qmap("hamilton new zealand", zoom=13)
round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
View(df)
df[,30:31]
qmap("hamilton new zealand", zoom=13, markers=df[,30:31])
dd <- round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
map <- get_googlemap(’houston’, markers = df, path = df, scale = 2)
ggmap(map, extent = ’device’)
dd <- round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
map <- get_googlemap('houston', markers = df, path = df, scale = 2)
ggmap(map, extent = 'device')
?get_googlemap
dd <- round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
map <- get_googlemap(geocode('houston'), markers = df, path = df, scale = 2)
ggmap(map, extent = 'device')
qmap("houston", markers=dd)
abline(v=2)
abline(v=20)
abline(h=200)
?qmap
?get_map
hamilton = get_map("hamilton new zealand", zoom=13)
hamiltonMap = ggmap("hamilton new zealand", extent="device", legend="topleft")
?ggmap
hamiltonMap = ggmap(hamilton, extent="device", legend="topleft")
hamilton = get_map("hamilton new zealand", zoom=13)
hamiltonMap = ggmap(hamilton, extent="device", legend="topleft")
..level..
?stat_density2d
hamiltonMap + stat_density2d(x=df$LON, y=df$LAT, geom="polygon")
hamiltonMap + stat_density2d(aes(x=df$LON, y=df$LAT), geom="polygon")
hamiltonMap + stat_density2d(aes(x=df$LNG, y=df$LAT), geom="polygon")
plot(x=2)
plot(x=rep(1,10), y=rep(1,10))
hamiltonMap = ggmap(hamilton, extent="device", legend="topleft")
hamiltonMap + stat_density2d(aes(x=df$LNG, y=df$LAT), geom="polygon")
df$LNG
df$LAT
